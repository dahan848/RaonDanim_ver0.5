<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper     
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"     
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.raon.raondanim.dao.AdminDAO">
	<!-- 계정잠금 상태 유저 목록 -->
	<select id="getLockoutUserList" resultType="map">
		SELECT user_id, user_lnm, user_fnm, user_reg_date ,user_last_try_login_time, user_num
		  FROM user_tb 
		 WHERE enabled = 0
	</select>
	
	<!-- 비활성화 계정 활성화 시키는 () -->
	<update id="userUnlock" parameterType="int">
		UPDATE user_tb
  		   SET enabled = 1
  		 WHERE user_num = #{usernum}
	</update>
	
	<!-- 문의글 DB에 인서트 -->
	<insert id="insertInquiry" parameterType="map">
		INSERT INTO INQUIRY_TB
			   (INQUIRY_NUM, INQUIRY_TYPE, INQUIRY_RGE_TYPE, INQUIRY_REG_ID, INQUIRY_SUBJECT, INQUIRY_CONTENT)
		VALUES (
				INQUIRY_TB_SEQ.nextval,
				#{inquiry_type},
				#{inquiry_rge_type},
				#{inquiry_reg_id},
				#{inquiry_subject},
				#{inquiry_content}
				)
	</insert>
	<!-- 페이징 처리를 위한 총 문의글 개수 구하기 -->
	<select id="selectInquiryTotalCount" parameterType="map" resultType="int">
        select count(*)
        from INQUIRY_TB
        WHERE 1 = 0
		        		<if test="type == 0">
           					OR 1=1
       					</if>
						<if test="type == 1">
           					OR INQUIRY_TYPE = 0
       					</if>
  							<if test="type == 2">
           					OR INQUIRY_TYPE = 1
       					</if>
       					<if test="type == 3">
           					OR INQUIRY_TYPE = 2
       					</if>
      						<if test="type == 4">
           					OR INQUIRY_ANSWER_ST = 0 
       					</if>
    </select>
    <!-- 조건에 따른 문의글 목록 반환 -->
	<select id="InquiryList" parameterType="map" resultType="map">
	  SELECT *
        FROM (SELECT ROWNUM as RNUM,INQUIRY_NUM,INQUIRY_TYPE,INQUIRY_REG_ID,INQUIRY_SUBJECT,INQUIRY_CONTENT,INQUIRY_REG_DATE,INQUIRY_RGE_TYPE,ANSWER_ST, ANSWER_NUM
                FROM (SELECT i.INQUIRY_NUM,i.INQUIRY_TYPE,i.INQUIRY_REG_ID,i.INQUIRY_SUBJECT,i.INQUIRY_CONTENT,i.INQUIRY_REG_DATE,i.INQUIRY_RGE_TYPE, a.ANSWER_NUM ,count(a.ANSWER_NUM) as ANSWER_ST
                        FROM INQUIRY_TB i left outer join ANSWER_TB a
                          ON i.INQUIRY_NUM = a.INQUIRY_NUM
                       WHERE 1 = 0
			        		<if test="type == 0">
            					OR 1=1
        					</if>
							<if test="type == 1">
            					OR i.INQUIRY_TYPE = 0
        					</if>
   							<if test="type == 2">
            					OR i.INQUIRY_TYPE = 1
        					</if>
        					<if test="type == 3">
            					OR i.INQUIRY_TYPE = 2
        					</if>
       						<if test="type == 4">
            					OR a.ANSWER_NUM is null
        					</if>
                        GROUP BY i.INQUIRY_NUM,i.INQUIRY_TYPE,i.INQUIRY_REG_ID,i.INQUIRY_SUBJECT,i.INQUIRY_CONTENT,i.INQUIRY_REG_DATE,i.INQUIRY_RGE_TYPE,a.ANSWER_NUM
                        ORDER BY i.INQUIRY_NUM desc))
        WHERE RNUM between #{firstRow} and #{endRow}
	</select>
	<!-- 문의글 더미 데이터 생성 -->
	<insert id="insertDummyInquiry" parameterType="map">
		INSERT INTO INQUIRY_TB
			   (INQUIRY_NUM, INQUIRY_TYPE, INQUIRY_RGE_TYPE, INQUIRY_REG_ID, INQUIRY_SUBJECT, INQUIRY_CONTENT)
		VALUES (
				INQUIRY_TB_SEQ.nextval,
				#{inquiry_type},
				#{inquiry_rge_type},
				#{inquiry_reg_id},
				#{inquiry_subject},
				#{inquiry_content}
				)
	</insert>
	<!-- DB에 답변 집어넣기 -->
		<insert id="insertAnswer" parameterType="map">
		INSERT INTO ANSWER_TB
			   (ANSWER_NUM, INQUIRY_NUM, ANSWER_CONTENT)
		VALUES (
				ANSWER_TB_SEQ.nextval,
				#{inquiry_num},
				#{content}
				)
	</insert>
	<!-- 답변 상태 업데이트 -->
	<update id="updateInquiryAnswer" parameterType="string">
		UPDATE INQUIRY_TB
  		   SET INQUIRY_ANSWER_ST = 1
  		 WHERE INQUIRY_NUM = #{INQUIRY_NUM}
	</update>
	<!-- 문의글 선택 -->
	<select id="selectInquiry" parameterType="string" resultType="map">
		SELECT INQUIRY_REG_ID, INQUIRY_SUBJECT, INQUIRY_CONTENT, INQUIRY_REG_DATE
  		  FROM INQUIRY_TB
  		 WHERE INQUIRY_NUM = #{INQUIRY_NUM}
	</select>
	
	
	<select id="getDeclarationBoard" parameterType="map" resultType="map">
select *
from(select  rownum as r,
             TRIP_BOARD_KEY,
             USER_NUM,
             USER_ID,
             USER_FNM,
             USER_LNM,
             USER_PW,
             TRIP_BOARD_TITLE,
             TRIP_BOARD_COUNTENT,
             TRIP_BOARD_START,
             TRIP_BOARD_END,
             TRIP_BOARD_TOGETHER,
             TRIP_BOARD_READCOUNT,
             TRIP_BOARD_ST,
             TRIP_WRITEDATE,
             D_KEY,
             TRIP_D_DETAILCONTENT,
             DECLARATION_CONTENT
        from(select  b.TRIP_BOARD_KEY,
                b.USER_NUM,
                u.USER_ID,
                u.USER_FNM,
                u.USER_LNM,
                u.USER_PW,
                b.TRIP_BOARD_TITLE,
                b.TRIP_BOARD_COUNTENT,
                b.TRIP_BOARD_START,
                b.TRIP_BOARD_END,
                b.TRIP_BOARD_TOGETHER,
                b.TRIP_BOARD_READCOUNT,
                b.TRIP_BOARD_ST,
                b.TRIP_WRITEDATE,
                d.D_KEY,
                d.TRIP_D_DETAILCONTENT,
                dt.DECLARATION_CONTENT
                from trip_board_tb b join user_tb u
                on b.user_num =  u.user_num
                join DECLARATION_TB d
                on b.TRIP_BOARD_KEY = d.TRIP_BOARD_KEY
                join DECLARATION_DTB dt
                on d.DECLARATION_KEY = dt.DECLARATION_KEY
                where b.TRIP_BOARD_KEY in (select distinct TRIP_BOARD_KEY
                                           from DECLARATION_TB)
                and b.TRIP_BOARD_ST = 0
                order by trip_board_key desc))
where r between #{start} and #{end}
	
	
	</select>
	
	
	<select id="getTripboardTotalCount" resultType="int">
	select count(b.trip_board_key)
	from declaration_tb d join trip_board_tb b
	on d.TRIP_BOARD_KEY = b.TRIP_BOARD_KEY
	where b.TRIP_BOARD_ST = 0
	
	</select>
	
	
	<select id="getMotelDeclarationList" parameterType="map" resultType="map">
<!-- 	총신고횟수 3이상만 끌고옴 -->
select *
from (select    rownum as r,
				motel_num,
				dCount,
				USER_NUM,
				MOTEL_TYPE,
				MOTEL_TITLE,
				MOTEL_INTRO,
				MOTEL_WRITEDATE,
                USER_ID,
                USER_FNM,
                USER_LNM,
                DECLARATION_CONTENT
      from (  select nvl(d.motel_num,0) as motel_num,
        count(d.motel_num) as dCount,
					      m.USER_NUM,
					      m.MOTEL_TYPE,
					      m.MOTEL_TITLE,
					      m.MOTEL_INTRO,
					      m.MOTEL_WRITEDATE,
                          u.USER_ID,
                          u.USER_FNM,
                          u.USER_LNM,
                          dt.DECLARATION_CONTENT
                from DECLARATION_TB d left outer join DECLARATION_DTB dt
                on d.DECLARATION_KEY = dt.DECLARATION_KEY
                join motel_tb m
                on d.MOTEL_NUM = m.MOTEL_NUM
                join user_tb u
                on d.D_USER_NUM = u.user_num
                where m.MOTEL_ST = 0
                group by d.motel_num,m.USER_NUM,m.MOTEL_TYPE,m.MOTEL_TITLE,m.MOTEL_INTRO,m.MOTEL_WRITEDATE,u.USER_ID, u.USER_FNM,u.USER_LNM,  dt.DECLARATION_CONTENT
                having count(d.motel_num) <![CDATA[>=]]> 3
                order by d.motel_num desc))
where r between #{start} and #{end}   
  
	</select>
	
	<select id="getMotelTotalCount" resultType="int">
	select count(*)
	from (  select nvl(d.motel_num,0),count(d.motel_num),m.USER_NUM,m.MOTEL_TYPE,m.MOTEL_TITLE,m.MOTEL_INTRO,m.MOTEL_WRITEDATE
        from DECLARATION_TB d left outer join DECLARATION_DTB dt
        on d.DECLARATION_KEY = dt.DECLARATION_KEY
        join motel_tb m
        on d.MOTEL_NUM = m.MOTEL_NUM
        where m.MOTEL_ST = 0
        group by d.motel_num,m.USER_NUM,m.MOTEL_TYPE,m.MOTEL_TITLE,m.MOTEL_INTRO,m.MOTEL_WRITEDATE
        having count(d.motel_num) <![CDATA[>=]]> 3)
	</select>
	
	
	<select id="getMotelReplyDeclarationList" parameterType="map" resultType="map" >
select * 
from (select  rownum as r,
        MOTEL_REPLY_NUM,
        dreplyCount,
        USER_NUM,
        CONTENT,
        MOTEL_REPLY_DATE,
        DECLARATION_CONTENT,
        USER_ID,
        USER_FNM,USER_LNM
      from (select nvl(d.MOTEL_REPLY_NUM,0) as MOTEL_REPLY_NUM,
                 count(d.MOTEL_REPLY_NUM) as dreplyCount,
                 m.USER_NUM,
                 m.CONTENT,
                 m.MOTEL_REPLY_DATE,
                 dt.DECLARATION_CONTENT,
                 u.USER_ID,
                 u.USER_FNM,
                 u.USER_LNM
            from DECLARATION_TB d left outer join DECLARATION_DTB dt
            on d.DECLARATION_KEY = dt.DECLARATION_KEY
            join motel_reply m
            on d.MOTEL_REPLY_NUM = m.MOTEL_REPLY_SQ
            join user_tb u
            on d.D_USER_NUM = u.user_num
            where m.MOTEL_REPLY_ST =0
            group by d.MOTEL_REPLY_NUM,
                     m.USER_NUM,
                     m.CONTENT,
                     m.MOTEL_REPLY_DATE,
                     dt.DECLARATION_CONTENT,
                     u.USER_ID,
                     u.USER_FNM,
                     u.USER_LNM
            having count(d.MOTEL_REPLY_NUM) <![CDATA[>=]]> 3
            order by d.MOTEL_REPLY_NUM desc))
where r between #{start} and #{end}            
	
	</select>
	
	<select id="getMotelReplyTotalCount" resultType="int">
select count(*)
from (  select nvl(d.MOTEL_REPLY_NUM,0),
        count(d.MOTEL_REPLY_NUM),
        m.USER_NUM,
        m.CONTENT,
        m.MOTEL_REPLY_DATE,
        m.MOTEL_REPLY_ST
        from DECLARATION_TB d left outer join DECLARATION_DTB dt
        on d.DECLARATION_KEY = dt.DECLARATION_KEY
        join motel_reply m
        on d.MOTEL_REPLY_NUM = m.MOTEL_REPLY_SQ
        group by d.MOTEL_REPLY_NUM,
                 m.USER_NUM,
                 m.CONTENT,
                 m.MOTEL_REPLY_DATE,
                 m.MOTEL_REPLY_ST
        having count(d.MOTEL_REPLY_NUM) >=3)
where MOTEL_REPLY_ST = 0
	</select>
	
	
</mapper>